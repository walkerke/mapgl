% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{query_features}
\alias{query_features}
\title{Query rendered features on a map in a Shiny session}
\usage{
query_features(
  proxy,
  geometry = NULL,
  layers = NULL,
  filter = NULL,
  callback = NULL
)
}
\arguments{
\item{proxy}{A MapboxGL or Maplibre proxy object, defined with \code{mapboxgl_proxy()} or \code{maplibre_proxy()}}

\item{geometry}{The geometry to query. Can be:
\itemize{
\item \code{NULL} (default): Query the entire viewport
\item A length-2 vector \code{c(x, y)}: Query at a single point in pixel coordinates
\item A length-4 vector \code{c(xmin, ymin, xmax, ymax)}: Query within a bounding box in pixel coordinates
}}

\item{layers}{A character vector of layer names to include in the query. If \code{NULL} (default), all layers are queried.}

\item{filter}{A filter expression used to filter features in the query. Should be a list representing a Mapbox GL expression.}

\item{callback}{A function to execute when results are ready. The function will receive the sf object as its argument.
If provided, this avoids timing issues by automatically handling results when they're available.}
}
\value{
The proxy object (invisibly). Use \code{get_queried_features()} to retrieve the query results manually,
or provide a \code{callback} function to handle results automatically.
}
\description{
This function triggers a query for rendered features on a map using a proxy object.
Use \code{get_queried_features()} to retrieve the results as an sf object, or use the
\code{callback} parameter to handle results automatically when they're ready.
}
\examples{
\dontrun{
# Query entire viewport with callback (recommended - avoids timing issues)
proxy <- maplibre_proxy("map")
query_features(proxy, layers = "counties", callback = function(features) {
  if (nrow(features) > 0) {
    proxy |> set_filter("selected_layer", list("in", "id", features$id))
  }
})

# Manual approach (may have timing issues)
query_features(proxy, layers = "counties")
features <- get_queried_features(proxy)

# Query specific bounding box with callback
query_features(proxy, geometry = c(100, 100, 200, 200), 
               layers = "counties", callback = function(features) {
  print(paste("Found", nrow(features), "features"))
})
}
}

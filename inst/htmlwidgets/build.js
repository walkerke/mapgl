#!/usr/bin/env node

/**
 * Build script for mapgl JavaScript modules
 * Concatenates modular JavaScript files back into single files for R package use
 */

const fs = require('fs');
const path = require('path');

// Build configuration
const builds = [
  {
    name: 'mapboxgl',
    modules: [
      'src/mapbox/utils.js',
      'src/mapbox/markers.js',
      'src/mapbox/sources.js',
      'src/mapbox/layers.js',
      'src/mapbox/effects.js',
      'src/mapbox/controls.js',
      'src/mapbox/legends.js',
      'src/mapbox/widget.js',
      'src/mapbox/proxy.js'
    ],
    output: 'build/mapboxgl.js'
  }
  // We'll add maplibre build config later
];

/**
 * Read a file and return its contents
 */
function readFile(filePath) {
  const fullPath = path.join(__dirname, filePath);
  if (!fs.existsSync(fullPath)) {
    throw new Error(`File not found: ${fullPath}`);
  }
  return fs.readFileSync(fullPath, 'utf8');
}

/**
 * Write content to a file
 */
function writeFile(filePath, content) {
  const fullPath = path.join(__dirname, filePath);
  const dir = path.dirname(fullPath);
  
  // Create directory if it doesn't exist
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  fs.writeFileSync(fullPath, content, 'utf8');
}

/**
 * Build a single JavaScript file from modules
 */
function buildFile(config) {
  console.log(`Building ${config.name}...`);
  
  let content = '';
  
  // Add header comment
  content += `/**\n`;
  content += ` * ${config.name}.js - Built from modular sources\n`;
  content += ` * Generated on: ${new Date().toISOString()}\n`;
  content += ` * \n`;
  content += ` * This file is automatically generated from modules.\n`;
  content += ` * Do not edit this file directly - edit the source modules instead.\n`;
  content += ` */\n\n`;
  
  // Concatenate all modules
  for (const modulePath of config.modules) {
    content += `// === ${modulePath} ===\n`;
    content += readFile(modulePath);
    content += '\n\n';
  }
  
  // Write the built file
  writeFile(config.output, content);
  
  console.log(`‚úì Built ${config.output} (${content.length} characters)`);
}

/**
 * Main build function
 */
function build() {
  console.log('üî® Building mapgl JavaScript files...\n');
  
  try {
    for (const config of builds) {
      buildFile(config);
    }
    
    console.log('\n‚úÖ Build completed successfully!');
  } catch (error) {
    console.error('\n‚ùå Build failed:', error.message);
    process.exit(1);
  }
}

// Run the build if this script is executed directly
if (require.main === module) {
  build();
}

module.exports = { build };